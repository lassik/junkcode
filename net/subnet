#! /usr/bin/env ruby

# Show the IPv4 subnet mask of the given network interface in CIDR
# notation based on ifconfig(8) settings.  The pf(4) firewall wants
# the subnet mask to be in CIDR notation.

def run(cmd)
  out = `#{cmd}`
  raise unless $?.exited? and ($?.exitstatus == 0)
  out
end

def ip_to_i(ip)
  case ip
  when /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/
    is = [$1, $2, $3, $4].map do |s|
      i = s.to_i
      raise if (i < 0) or (i > 255)
      i
    end
    (is[0] << 24) | (is[1] << 16) | (is[2] << 8) | is[3]
  when /^0x([0-9A-Fa-f]{8})$/
    $1.to_i(16)
  else
    raise
  end
end

# The sigbits function returns the number of significant bits in the
# given 32-bit unsigned integer bitmask.  The bitmask must be of the
# form 11110000, with any proportion of ones and zeros.

def sigbits(mask)
  sig = nil
  31.downto(0) do |bit| if mask & (1 << bit) == 0; sig = bit; break; end; end
  raise unless sig
  sig.downto(0) do |bit| raise unless mask & (1 << bit) == 0 end
  31 - sig
end

def i_to_ip(i)
  [24, 16, 8, 0].map do |shift| (0xff & (i >> shift)).to_s end.join(".")
end

def cidr(inet, mask)
  i_to_ip(inet & mask) + "/" + sigbits(mask).to_s
end

def main(interface)
  run("ifconfig #{interface}").scan(/inet ([^\s]*) netmask ([^\s]*)/) do
    puts(cidr(ip_to_i($1), ip_to_i($2)))
  end
end

main(*ARGV)
